# Generated by Django 3.2.19 on 2023-07-11 12:39

import datetime
from django.db import migrations

def load_scheduled_tasks(apps, schema_editor):
    ScheduledTask = apps.get_model('core', 'ScheduledTask')

    data = {
        'delete_unactivated_accounts': {
            'description': 'Suppression des comptes à minima non activés',
            'active': True,
            'date': None,
            'time': datetime.time(4, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'send_course_alerts': {
            'description': 'Envoi des disponibilités suite aux alertes',
            'active': True,
            'date': None,
            'time': datetime.time(22, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'send_attestation_expiration_warning': {
            'description': 'Envoi du mail de rappel de pièces bientôt expirées',
            'active': True,
            'date': None,
            'time': datetime.time(7, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'delete_account_not_in_ldap': {
            'description': 'Suppression des comptes gestionnaires qui ne sont plus dans le ldap',
            'active': True,
            'date': datetime.date(2023, 7, 30),
            'time': datetime.time(6, 0),
            'frequency': None,
            'monday': False,
            'tuesday': False,
            'wednesday': False,
            'thursday': False,
            'friday': False,
            'saturday': False,
            'sunday': False
        },
        'send_components_slots_reminder': {
            'description': 'Envoi du mail de rappel aux référents Structures sur les créneaux à venir',
            'active': True,
            'date': None,
            'time': datetime.time(6, 0),
            'frequency': None,
            'monday': True,
            'tuesday': False,
            'wednesday': False,
            'thursday': False,
            'friday': False,
            'saturday': False,
            'sunday': False
        },
        'send_slot_evaluation_message': {
            'description': "Envoi du mail d'évaluation de créneaux",
            'active': True,
            'date': None,
            'time': datetime.time(6, 30),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': False
        },
        'send_speaker_slot_reminder': {
            'description': 'Envoi du mail de rappel aux intervenants avec la liste des inscrits',
            'active': True,
            'date': None,
            'time': datetime.time(8, 15),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'send_global_evaluation_message': {
            'description': "Envoi du mail d'évaluation du dispositif à tous les inscrits de la plateforme",
            'active': True,
            'date': datetime.date(2023, 7, 12),
            'time': datetime.time(16, 0),
            'frequency': None,
            'monday': False,
            'tuesday': False,
            'wednesday': False,
            'thursday': False,
            'friday': False,
            'saturday': False,
            'sunday': False
        },
        'send_pending_validations_notification': {
            'description': "Envoi d'un mail de rappel aux reférents lycée et référent Etablissement pour dire qu'il y a des comptes lycéens à valider",
            'active': True,
            'date': None,
            'time': datetime.time(7, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': False,
            'sunday': False
        },
        'send_slot_reminder': {
            'description': 'Envoi du mail de rappel aux inscrits',
            'active': True,
            'date': None,
            'time': datetime.time(8, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'auto_immersion_cancellation': {
            'description': 'Annulation des inscriptions aux immersions suite aux pièces périmées',
            'active': True,
            'date': None,
            'time': datetime.time(6, 15),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        },
        'send_slot_reminder_on_closed_registrations': {
            'description': 'Envoi du mail de rappel aux intervenants avec la liste des inscrits à la cloture des inscriptions',
            'active': True,
            'date': None,
            'time': datetime.time(6, 0),
            'frequency': None,
            'monday': True,
            'tuesday': True,
            'wednesday': True,
            'thursday': True,
            'friday': True,
            'saturday': True,
            'sunday': True
        }
    }

    for command_name, task in data.items():
        if not ScheduledTask.objects.filter(command_name=command_name).exists():
            ScheduledTask.objects.create(
                command_name=command_name,
                **task
            )

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0202_auto_20230711_0857'),
    ]

    operations = [
        migrations.RunPython(load_scheduled_tasks)
    ]
